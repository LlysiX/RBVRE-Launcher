#include "common.bt"

// This file seems to contain a tree of Forge game objects
// The objects are saved with their structure (property names/types) and state (prop values)
// Many of the forge file formats have these serialized objects in them.
// Some object definitions are present in the .script_dta_ps4 files,
// while others are hardcoded into the game (such as EntityHeader, RBSongMetadata, etc)

typedef struct {
    enum {
        kFloat  = 0x0,
        // 0x1, 0x2
        kInt    = 0x3,
        kByte   = 0x5,
        kFlag   = 0x7,
        kEnum   = 0x8,
        kBool   = 0x9,
        kSymbol = 0xB,
        kString = 0xC,
        // 0xD, 0xE
        kStruct = 0xF,
        kDrivenProp = 0x10
    } data_type : 8;
    int is_array : 1;
} prop_type<read=prop_type_read>;
string prop_type_read(prop_type& t)
{
    local string result;
    SPrintf(result, "%s%s", EnumToString(t.data_type), t.is_array ? "[]" : "");
    return result;
}

typedef struct {
    int flag_0 : 1;
    int ChangeName : 1;
    int ChangeLayer : 1;
    int Delete : 1;
    int ChangeProps : 1;
    int AddComponent : 1;
    int RemComponent : 1;
    int ShowInLister : 1;
    int Selectable : 1;
} editor_capability_flags;

// Arrays might be 0x100 | type ?

struct PropDef {
        PSTR name;
        prop_type type;
        if(type.is_array){
            int array_type;
        }
        if(type.data_type == kStruct){
            int64 refcount;
            int num_children;
            struct PropDef children[num_children]<optimize=false,read=prop_read>;
        }
};
string prop_read(struct PropDef& p) {
    local string name;
    SPrintf(name, "%s:%s", p.name.name, prop_type_read(p.type));
    return name;
}

typedef struct propVal (struct PropDef& p) {
    local string name;
    SPrintf(name, "%s:%s", p.name.name, prop_type_read(p.type));
    if(p.type.is_array){
        int num_elements;
        if(num_elements != 0){
        switch(p.type.data_type){
            case kFloat:
                float floatVals[num_elements];
                break;
            case kInt:
                int intVals[num_elements];
                break;
            case kFlag:
                int flagVals[num_elements];
                break;
            case kEnum:
                int64 enumVals[num_elements];
                break;
            case kBool:
            case kByte:
                byte boolVals[num_elements];
                break;
            case kSymbol:
                struct {
                    PSTR symbolVal;
                    if((symbolVal.strlen == 0) && (ReadByte() == 0) && (ReadShort() != 0))
                       FSkip(1);
                } symbolVals[num_elements] <optimize=false>;
                break;
            case kString:
                struct {
                    PSTR stringVal; 
                    if(ReadByte() == 0) FSkip(1);
                } stringVals[num_elements] <optimize=false>;
                break;
            case kStruct:
                struct (struct PropDef& p) {
                    local int x = 0;
                    for(x = 0; x < p.num_children; x++){
                        struct propVal child(p.children[x]) <read=propVal_READ>;
                    }
                } structVals(p)[num_elements]<optimize=false>;
                break;
            case kDrivenProp:
                struct {
                    int64 unk_driven_prop_1;
                    PSTR propType;
                    int32 unk_driven_prop_2;
                    int64 unk_driven_prop_3;
                    PSTR propName;
                } drivenProps[num_elements] <optimize=false>;
                break;
            default:
                int unkVal[num_elements];
                break;
        }
        }
    } else {
        switch(p.type.data_type){
            case kFloat:
                float floatVal;
                break;
            case kInt:
                int intVal;
                break;
            case kFlag:
                int flagVal;
                break;
            case kEnum:
                int64 enumVal;
                break;
            case kBool:
            case kByte:
                byte boolVal;
                break;
            case kSymbol:
                PSTR symbolVal;
                // Weird: sometimes there is an extra '\0' after symbols / strings?
                if((symbolVal.strlen == 0) && (ReadByte() == 0) && (ReadShort() != 0))
                    FSkip(1);
                else if(ReadByte() == 0 && ReadShort() != 0 && (ReadShort() == ReadInt()))
                    FSkip(1);
                break;
            case kString:
                PSTR stringVal; 
                if(ReadByte() == 0)
                    FSkip(1);
                break;
            case kStruct:
                local int x = 0;
                for(x = 0; x < p.num_children; x++){
                    struct propVal child(p.children[x]) <read=propVal_READ>;
                }
                break;
            case kDrivenProp:
                int32 unk_driven_prop_1;
                int32 unk_driven_prop_2;
                if(unk_driven_prop_2 == 0){
                    PSTR propType;
                    int32 unk_driven_prop_2;
                    int64 unk_driven_prop_3;
                    PSTR propName;
                } else {
                    int32 unk1, unk2, unk3;
                }
                break;
            default:
                int unkVal;
                break;
        }
    }
} PropVal<read=PropVal_READ>;
string PropVal_READ(PropVal& v)
{
  return v.name;
}
string propVal_READ(struct propVal& v)
{
  return v.name;
}

typedef struct {
    PSTR ent_name;
    PSTR ent_name_2;
    int unk_type;
    int64 unk_count;
    int num_props;
    struct PropDef props[num_props]<optimize=false,read=prop_read>;
    local int x = 0;
    local int data_size;
    for(x = 0; x < num_props; x++){
      PropVal value(props[x]) <optimize=false>;
    }
    if(data_size != 0)
        char prop_data[data_size];
} Component<read=COM_READ>;
string COM_READ(Component& e){
    return e.ent_name.name;
}

typedef struct entity {
    int16 index_0;
    int16 index_1;
    //Assert(index_0 == index_1, "indices should be equal");
    if(index_0 == -1 && index_1 == -1) {
    }
    else {
        int32 unk_two_0;
        //Assert(unk_two_0 == 2, "unk_two_0 should be 2");
        PSTR  name;
        int32 num_children;
        Component coms[num_children] <optimize=false>;
    }
} forge_Entity<read=forge_object_read>;
string forge_object_read(forge_Entity& f){
    return f.index_0 == -1 ? "TODO" : f.name.name;
}

typedef struct {
    int32 version;
    int32 more_data;
} forge_hdr;

typedef struct forge_tree(forge_hdr& hdr){
    if(ReadInt() == 0){
        FSkip(4);
        if(hdr.version > 0xF) {
            int32 unk;
        }
        if(hdr.version > 0xE) {
            int32 unk5;
        }
        int32 unk_19_or_20;
        int32 unk_one_1;
        int32 same_19_or_20;
        if(hdr.version > 0xE) {
            int32 unk5;
        }
        int32 unk_zero_1;
        int16 unk_flag1;
        int32 num_objects;
        if(hdr.version == 0x10) {
            forge_Entity entities[num_objects/4]<optimize=false>;
            int32 unknown_tail_data[9];
        }
        else {
            forge_Entity entities[num_objects]<optimize=false>;
        }
    } else {
        PSTR type;
        PSTR value;
    }
} forge_tree;

// The file is a list of what I am calling forge_tree structs.
// They start with a header. At the end of the list there is another header
// that signals the end of the file by setting more_data=0
forge_hdr hdr;
local int cont = hdr.more_data;
while(cont) {
    forge_tree tree(hdr);
    forge_hdr hdr;
    cont = hdr.more_data;
}
