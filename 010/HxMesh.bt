//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
LittleEndian();
typedef enum <int> {
    Invalid = -1,
    Color = 0,
    ColorTex = 2,
    Unskinned = 3,
    Skinned = 4,
    PosOnly = 5,
    Particle = 6,
    UnskinnedCompressed = 7,
    SkinnedCompressed = 8
} VertexType;

typedef struct {

    float x;
    float y;
    float z;
    
    char unk;
    float unk;
    char unk;
    hfloat unk;
    int unk;
    int unk;
    int unk;
    hfloat unk; // Not sure about this one
    hfloat unk;
    hfloat unk;
    hfloat unk;
    hfloat unk;
    hfloat unk;
    // Repeated UV coordinates?
    hfloat u1;
    hfloat v1;
    hfloat u2;
    hfloat v2;
    if(vertexType == ColorTex) {
        byte unkColorTex[80 - 52];
    }
    else if(vertexType == UnskinnedCompressed)
    {
            short unk;
            short unk;
            int unk;
            int unk;
    }
} Point;

typedef struct {
    int v1, v2, v3;
} Triangle;

char ID[8];
int endian;
int version;
VertexType vertexType;

int num_verts;
int num_tris;
if(version >= 0xC)
    char bools[2];
if(version >= 0xD)
    char bools_2[2];
if(version > 3)
    char keepMeshData;
uint vertexUsageFlags;
uint faceUsageFlags;
if(version > 0xA)
    uint unk;
float unkFloats[4];
Point vertices[num_verts];
Triangle tris[num_tris];